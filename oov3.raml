#%RAML 0.8
# vim: set ft=yaml:
baseUri: http://server/broker/rest
title: OpenShiftV3
version: alpha1
mediaType: application/json
documentation:
 - title: Overview
   content: !include doc/overview.md
/projects:
  get:
    description: |
      List all projects for your account.

      Projects are a similar concept to v2 domains. A project is a grouping of services 
      with shared access control and resource limits. Applications can be assembled 
      from services in a project by linking them together via service endpoints.
    responses:
      200:
        body:
          example: !include examples/project-list.json
  post:
    description: Create a new project
    body:
      example: !include examples/project.json

/project/{projectID}:
    get:
      description: Get a specific project
      responses:
        200:
          body:
            example: !include examples/project.json
    put:
      description: Update a project
      body:
        example: !include examples/project-put.json
    delete:
      description: Delete a project
      responses:
        200:
          body:
            example: |
              {
                "success": true
              }
    post:
      description: Instantiate a template in the given project
      body:
        example: !include examples/project-post.json
/image-streams:
  get:
    queryParameters:
      domainId:
        description: Filter list by domain
        type: string
      visibility:
        description: Filter by visibility (public, private)
        type: string
    description: |
      Lists all image streams that you have access to.
      
      An image stream is a collection of images that share the same metadata. It contains 
      multiple versions of an image as it evolves over time with new builds of the codebase. 
      An image stream may be associated with a build which can be triggered by an event such
      as a commit to a source repository. The build will then push a new image on to the stream.
    responses:
      200:
        body:
          example: !include examples/image-streams.json
  post:
    description: Create a new image stream
    body:
      example: !include examples/image-stream.json
/image-stream/{streamID}:
    get:
      description: Get information about an image stream
      body:
        example: !include examples/image-stream.json
    put:
      description: Update an image stream
      body:
        example: !include examples/image-stream.json
    delete:
      description: Delete an image stream
      responses:
        200:
          body:
            example: |
              {
                "success": true
              }
/images:
  get:
    queryParameters:
      streamId:
        description: Filter list by stream
        type: string
    description: |
      Lists images visible to you

      Images can be stored in Openshift servers or can be references to images from
      an external repository. The metadata that Openshift stores for an image will augment
      the metadata that has already been specified in the image through its Dockerfile.
    responses:
      200:
        body:
          example: !include examples/images.json
  post:
    description: Create a new image definition
    body:
      example: !include examples/create-image.json
/image/{imageID}:
    get:
      description: Get image definition
      body:
        example: !include examples/image.json

/services:
  get:
    description: |
      Lists all services that your account has access to
      
      Services can be public or owned by a project. They contain a template of a pod and
      reference image streams that supply the images for those templates. A service may 
      be configured to react to an image being pushed to an image stream by initiating a 
      deployment. Deployments are associated with a service and make use of 
      Kubernetes replication controllers to manage pods in a cluster.
      For deployments, a service contains a policy that constrains how deployments can occur.
      For example, it may require that there exist at least 2 operational pods at all times.
      A deployment needs to operate under those constraints when making changes.
    queryParameters:
      projectId:
        description: filter the services owned by a particular project
    responses:
      200:
        body:
          example: !include examples/services.json
  post:
    description: Create a new service
    body:
      example: !include examples/create-service.json
/service/{serviceID}:
    get:
      description: Get a specific service definition
      body:
        example: !include examples/service.json
    put:
      description: Update a service
      body:
        example: !include examples/service.json
    delete:
      description: Delete a service
      responses:
        200:
          body:
            example: |
              {
                "success": true
              }
    /environment-variables:
      get:
        description: Environment variables associated with this service
        responses:
          200:
            body:
              example: !include examples/envvars.json
      post:
        description: Create/update environment variables
        body:
          example: !include examples/envvars.json
      /{variableName}:
        get:
          description: Get environment variable
          body:
            example: !include examples/envvar.json
        put:
          description: Update an environment variable's value
          body:
            example: !include examples/envvar.json
        delete:
          description: Delete an environment variable
          responses:
            200:
              body:
                example: |
                  {
                    "success": true
                  }
/deployments:
  get:
    description: |
      Lists active deployments in the current project

      Deployments effect change in a service such as scaling up, down, updating the 
      current image, etc. Deployments may use different policies for carrying out
      the change. For example, a rolling update with a single pod change at a time, or
      a batch update, etc. Deployments make use of Kubernetes replicationControllers
      to bring about the changes.
    responses:
      200:
        body:
          example: !include examples/deployments.json
  post:
    description: Create a new image in the stream
    body:
      example: !include examples/create-deployment.json
/deployment/{deploymentID}:
  get:
    description: Get deployment details
    body:
      example: !include examples/deployment.json
/links:
  get:
    description: |
      List of links between services in your account

      Unlike a Docker link, a Link in OpenShift defines a relationship between services
      which may be composed by multiple Docker images. A link may include additional metadata
      about the relationship such as the algorithm to use to distribute requests.
    queryParameters:
      projectId:
        description: filter the links owned by a particular project
      serviceId:
        description: filter the links attached to a particular service
    responses:
      200:
        body:
          example: !include examples/links.json
  post:
    description: Create a new link between this service and a different service
    body:
      example: !include examples/link.json
/link/{linkID}:
  get:
    description: Get link details
    body:
      example: !include examples/link.json
  put:
    description: Update a link
    body:
      example: !include examples/link.json
  delete:
    description: Delete a link
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }
/aliases:
  get:
    description: |
      List all aliases visible to you

      Aliases in v3 perform the same function as aliases in v2. The main difference
      is that in v3 an alias is associated with a service, not an application.
    queryParameters:
      serviceId:
        description: filter aliases by associated service
    responses:
      200:
        body:
          example: !include examples/aliases.json
  post:
    description: Create an alias for this service
    body:
      example: !include examples/alias.json
/alias/{aliasID}:
  get:
    description: Get alias
    body:
      example: !include examples/alias.json
  put:
    description: Update an alias
    body:
      example: !include examples/alias.json
  delete:
    description: Delete an alias
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }
/builds:
  get:
    description: |
      Retrieves a list of builds visible to you

      A build is associated with an image stream and can be triggered by a webhook
      on Github. It can either be a Docker build or a source build based on a 
      specified image. When a build completes, it posts a new image to the image
      stream that it's associated with.
    responses:
      200:
        body:
          example: !include examples/builds.json
  post:
    description: Create a new build
    body:
      example: !include examples/build.json
/build/{buildId}:
  get:
    description: Retrieve a single build definition
    responses:
      200:
        body:
          example: !include examples/build.json
  put:
    description: Update a build definition
    body:
      example: !include examples/build.json
  delete:
    description: Delete a build definition
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }
  post:
    description: Launch a build
    body:
      example: !include examples/launch-build.json
  /results:
    get:
      description: Retrieves list of build results
      responses:
        200:
          body:
            example: !include examples/build-results.json

/templates:
  get:
    description: |
      Lists all templates that your account has access to

      A template defines 0..n services and 0..m links. When it is applied
      to an existing project, those services and links are instantiated for
      that project.
    responses:
      200:
        body:
          example: !include examples/templates.json
  post:
    description: Create a new template
    body:
      example: !include examples/template.json
/template/{templateID}:
  get:
    description: Get a specific template
    body:
      example: !include examples/template.json
  put:
    description: Update a template
    body:
      example: !include examples/template.json
  delete:
    description: Delete a template
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }
/user/{userID}:
  get:
    description: Get a specific user
    body:
      example: !include examples/user.json
  put:
    description: Update a user
    body:
      example: !include examples/user.json
  delete:
    description: Delete a user
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }
/team/{teamID}:
  get:
    description: Get a specific team
    body:
      example: !include examples/team.json
  put:
    description: Update a team
    body:
      example: !include examples/team.json
  delete:
    description: Delete a team
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }
/role/{roleID}:
  get:
    description: Get a specific role
    body:
      example: !include examples/role.json
  put:
    description: Update a role
    body:
      example: !include examples/role.json
  delete:
    description: Delete a role
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }

/authorization/{authorizationID}:
  get:
    description: Get a specific authorization
    body:
      example: !include examples/authorization.json
  post:
    description: Create an new authorization
    body:
      example: !include examples/authorization-create.json
  put:
    description: Update a authorization
    body:
      example: !include examples/authorization.json
  delete:
    description: Delete a authorization
    responses:
      200:
        body:
          example: |
            {
              "success": true
            }

